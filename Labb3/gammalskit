#ifndef BINARY_SEARCH_TREE_H
#define BINARY_SEARCH_TREE_H

#include "dsexceptions.h"
#include <algorithm>
#include <string>
using namespace std;

// BinarySearchTree class
//
// CONSTRUCTION: zero parameter
//
// *****************PUBLIC OPERATIONS********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// bool contains( x )     --> Return true if x is present
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// boolean isEmpty( )     --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order
// *****************ERRORS*******************************
// Throws UnderflowException as warranted

template <typename Comparable>
class BinarySearchTree
{

  class BinaryNode; // tracking class from the top

  public:

    //The class BiIterator should also have a default constructor and
    //a constructor to create a bidirectional iterator given a pointer to a treeÍs node.
class BiIterator
	  {
	  public:

		  BiIterator()
		  {
			  current = nullptr;
		  };

		  BiIterator(BinaryNode* t)
		  {
			  current = t;
		  }


		 const Comparable& operator*() const
		  {
			 return current->element;
		  }
		  Comparable* operator->() const
		  {
			  return &current->element;
		  }
		  bool operator==(const BiIterator &it) const
		  {
			  return current == it.current;
		  }
		  bool operator!=(const BiIterator &it) const
		  {
			  return current != it.current;
		  }
		  BiIterator& operator++()
		  {
			  current = find_successor(current);
			  return *this;
		  }	//pre-increment
		  BiIterator& operator--()
		  {
			  current = find_predecessor(current);
			  return *this;
		  }//pre-decrement

	  private:
		  BinaryNode *current;

	 };


    BiIterator end() const
    {
      return BiIterator();
    }
    BiIterator begin() const
    {
      return findMin(root);
    }


    BinarySearchTree( ) : root{ nullptr }
    {
    }

    /**
     * Copy constructor
     */
    BinarySearchTree( const BinarySearchTree & rhs ) : root{ nullptr }
    {
        root = clone( rhs.root, nullptr );
    }

    /**
     * Move constructor
     */
    BinarySearchTree( BinarySearchTree && rhs ) : root{ rhs.root }
    {
        rhs.root = nullptr;
    }

    /**
     * Destructor for the tree
     */
    ~BinarySearchTree( )
    {
        makeEmpty( );
    }

    /**
     * Copy assignment
     */
    BinarySearchTree & operator=( const BinarySearchTree & rhs )
    {
        BinarySearchTree copy_ = rhs;
        std::swap( *this, copy_ );
        return *this;
    }

    /**
     * Move assignment
     */
    BinarySearchTree & operator=( BinarySearchTree && rhs )
    {
        std::swap( root, rhs.root );
        return *this;
    }


    /**
     * Find the smallest item in the tree.
     * Throw UnderflowException if empty.
     */
    const Comparable & findMin( ) const
    {
        if( isEmpty( ) )
            throw UnderflowException{ };
        return findMin( root )->element;
    }

    /**
     * Find the largest item in the tree.
     * Throw UnderflowException if empty.
     */
    const Comparable & findMax( ) const
    {
        if( isEmpty( ) )
            throw UnderflowException{ };
        return findMax( root )->element;
    }

    /**
     * Returns true if x is found in the tree.
     */
    bool contains( const Comparable & x ) const
    {
        return contains( x, root );
    }

    /**
     * Test if the tree is logically empty.
     * Return true if empty, false otherwise.
     */
    bool isEmpty( ) const
    {
        return root == nullptr;
    }

    /**
     * Print the tree contents in sorted order.
     */
    void printTree( ostream & out = cout ) const
    {
        if( isEmpty( ) )
            out << "Empty tree" << endl;
        else
            printTree( root, out );
    }

    /**
     * Make the tree logically empty.
     */
    void makeEmpty( )
    {
        makeEmpty( root );
    }

    /**
     * Insert x into the tree; duplicates are ignored.
     */
    void insert( const Comparable & x )
    {
        root = insert( x, root );
    }

    /**
     * Insert x into the tree; duplicates are ignored.
     */
    void insert( Comparable && x )
    {
        root = insert( std::move( x ), root );
    }

    /**
     * Remove x from the tree. Nothing is done if x is not found.
     */
    void remove( const Comparable & x )
    {
        root = remove( x, root );
    }

	/*Own made public funcitons*/

	Comparable get_parent(Comparable  x)
	{
		BinaryNode* tmp = finder(x);
		if ( !tmp || !tmp->parent)
			return Comparable(); // to be modified

		else if (tmp->parent)
            return tmp->parent->element;
	}

	void find_pred_succ(const Comparable& x, Comparable& pred, Comparable& suc) const
	{
//	    BinaryNode* Pcomp = finder(x);
//        BinaryNode* Scomp = finder(x);
//
////
//        Pcomp = find_predecessor(Pcomp);
//        Scomp = find_successor(Scomp);
//
//	    pred = Pcomp->element;
//        suc = Scomp->element;
        BinaryNode* p = root;
        bool run = true;

        while(p && run)
        {
            if(p->element == x)
                run = false;

            if(p->element > x)
            {
                suc = p->element;
                p = p->left;
            }

            else if(p->element < x)
            {
                pred = p->element;
                p = p->right;
            }

            else
            {
                if(p->left)
                {
                    pred = findMax(p->left)->element;
                }

                if(p->right)
                {
                    suc = findMin(p->right)->element;
                }
            }
        }
	}

  private:

    struct BinaryNode
    {
        Comparable element;
        BinaryNode *left;
        BinaryNode *right;
		BinaryNode *parent; //added parent node

        BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt, BinaryNode *pt )
			: element{ theElement }, left{ lt }, right{ rt }, parent{ pt } { }

        BinaryNode( Comparable && theElement, BinaryNode *lt, BinaryNode *rt, BinaryNode *pt)
			: element{ std::move(theElement) }, left{ lt }, right{ rt }, parent{ pt } { }
    };

    BinaryNode *root;

    BinaryNode* finder(Comparable x) const
	{
	    BinaryNode* tmp = root;

		while (tmp && tmp->element != x)
		{
			if (tmp->element < x)
				tmp = tmp->right;
			else tmp = tmp->left;
		}
        return tmp;
	}

	void preOrderDis(BinaryNode *t, ostream  & out, int lvl) const
	{
		if (t != nullptr)
		{
			out << string(lvl*2, ' ')  << t->element << endl;

			preOrderDis(t->left, out,lvl + 1);

			preOrderDis(t->right, out, lvl + 1);
		}
	}

	/* Anx - functions */
	static BinaryNode* find_successor(BinaryNode* t)
	{
//		if (t != nullptr && t->right != nullptr)
//		{
//			return findMin(t->right);
//		}
//		else //successor is one of the ancestors
//		{
//			BinaryNode *p = t->parent;
//
//			while (p!= nullptr && t == p->right)
//			{
//				t = p;
//				p = p->parent;
//			}
//			return p;
//		}
//        BinaryNode* succ = nullptr;
//        BinaryNode* p = t->parent;
//
//        if( t->right != nullptr )
//            return findMin(t->right);
//
//        // Start from root and search for successor down the tree
//        while (p != nullptr)
//        {
//            if (t->element < p->element)
//            {
//                succ = p;
//                p = p->left;
//            }
//            else if (t->element > p->element)
//                p = p->right;
//            else
//               break;
//        }
//
//        return succ;

        Comparable tmp = t->element ;

		if (t != nullptr && t->right)
		{
			return findMin(t->right);
		}
		else //successor is one of the ancestors
		{
			BinaryNode *p = t->parent;

			while (p && t == p->right)
			{
				t = p;
				p = p->parent;
			}
			return p;
		}
	}

	static BinaryNode* find_predecessor(BinaryNode* t)
	{
//		if (t != nullptr && t->left != nullptr) //t has a left sub-tree
//		{
//			return findMax(t->left);
//		}
//		else //predecessor is one of the ancestors
//		{
//			BinaryNode *p = t->parent;
//
//			while (p != nullptr && t == p->left)
//			{
//				t = p;
//				p = p->parent;
//			}
//			return p;
//		}

//        BinaryNode* pred = nullptr;
//        BinaryNode *p = t->parent;
//
//        if( t->right != nullptr )
//            return findMax(t->left);
//
//        // Start from root and search for successor down the tree
//        while (p != nullptr)
//        {
//            if (t->element < p->element)
//            {
//                pred = p;
//                p = p->right;
//            }
//            else if (t->element > p->element)
//                p = p->left;
//            else
//               break;
//        }
//
//        return pred;

        if (t  && t->left != nullptr) //t has a left sub-tree
		{
			return findMax(t->left);
		}
		else //predecessor is one of the ancestors
		{
			BinaryNode *p = t->parent;

			BinaryNode *tCopy = t;

			while (p && tCopy == p->left)
			{
				tCopy = p;
				p = p->parent;
			}
			return p;
		}
	}

    /**
     * Internal method to insert into a subtree.
     * x is the item to insert.
     * t is the node that roots the subtree.
     * Return a pointer to the root of the subtree.
     */
    BinaryNode* insert( const Comparable & x, BinaryNode* t )
    {
        if( t == nullptr )
            t = new BinaryNode{ x, nullptr, nullptr, nullptr };
		else if (x < t->element)
		{
			t->left = insert( x, t->left );
			t->left->parent = t;
		}

		else if (t->element < x)
		{
			t->right = insert(x, t->right);
			t->right->parent = t;
		}

        else
        {
            ;  // Duplicate; do nothing
        }

        return t;
    }

    /**
     * Internal method to insert into a subtree.
     * x is the item to insert.
     * t is the node that roots the subtree.
     * Return a pointer to the root of the subtree.
     */
    BinaryNode* insert( Comparable && x, BinaryNode* t )
    {
		if (t == nullptr)
		{
			//find parent to add it to the structure
			t = new BinaryNode{ std::move(x), nullptr, nullptr, nullptr};
		}

		else if (x < t->element)
		{
			t->left = insert(std::move(x), t->left);
			t->left->parent = t;
		}

		else if (t->element < x)
		{
			t->right = insert(std::move(x), t->right);
			t->right->parent = t;
		}

        else
        {
             ;  // Duplicate; do nothing
        }

        return t;
    }


    /**
     * Internal method to remove from a subtree.
     * x is the item to remove.
     * t is the node that roots the subtree.
     * Return a pointer to the root of the subtree.
     */
    BinaryNode* remove( const Comparable & x, BinaryNode *t )
    {
        if( t == nullptr )
            return t;   // Item not found
        if( x < t->element )
            t->left = remove( x, t->left );
        else if( t->element < x )
            t->right = remove( x, t->right );
        else if( t->left != nullptr && t->right != nullptr ) // Two children
        {
            t->element = findMin( t->right )->element;
            t->right = remove( t->element, t->right );
        }
        else
        {
            BinaryNode *oldNode = t;
            t = ( t->left != nullptr ) ? t->left : t->right;

			if(t)
			t->parent = nullptr;

            delete oldNode;
        }

        return t;
    }


    /**
     * Internal method to find the smallest item in a subtree t.
     * Return node containing the smallest item.
     */
    BinaryNode * findMin( BinaryNode *t ) const
    {
        if( t == nullptr )
            return nullptr;
        if( t->left == nullptr )
            return t;
        return findMin( t->left ); //recursive call
    }

    /**
     * Internal method to find the largest item in a subtree t.
     * Return node containing the largest item.
     */
    BinaryNode * findMax( BinaryNode *t ) const
    {
        if( t != nullptr )
            while( t->right != nullptr )
                t = t->right;
        return t;
    }


    /**
     * Internal method to test if an item is in a subtree.
     * x is item to search for.
     * t is the node that roots the subtree.
     */
    bool contains( const Comparable & x, BinaryNode *t ) const
    {
        if( t == nullptr )
            return false;
        else if( x < t->element )
            return contains( x, t->left );
        else if( t->element < x )
            return contains( x, t->right );
        else
            return true;    // Match
    }
/****** NONRECURSIVE VERSION*************************
    bool contains( const Comparable & x, BinaryNode *t ) const
    {
        while( t != nullptr )
            if( x < t->element )
                t = t->left;
            else if( t->element < x )
                t = t->right;
            else
                return true;    // Match

        return false;   // No match
    }
*****************************************************/

    /**
     * Internal method to make subtree empty.
     */
    void makeEmpty( BinaryNode * & t )
    {
        if( t != nullptr )
        {
            makeEmpty( t->left );
            makeEmpty( t->right );
            delete t;
        }
        t = nullptr;
    }

    /**
     * Internal method to print a subtree rooted at t in sorted order.
     * In-order traversal is used
     */
    void printTree( BinaryNode *t, ostream & out ) const
    {
		preOrderDis(t, out, 0);
    }

    /**
     * Internal method to clone subtree.
     */
    BinaryNode * clone( BinaryNode *t, BinaryNode* parent ) const
    {
        if( t == nullptr )
            return nullptr;


		BinaryNode* p = new BinaryNode{ t->element, nullptr, nullptr, parent };
		BinaryNode* left = clone(t->left, p);
		BinaryNode* right = clone(t->right, p);

		p->right = right;
		p->left = left;

		if(left)
            left->parent = p;
        if(right)
            right->parent = p;

        return p;
    }

};

#endif
